import Investment from "./models/Investment";
import cron from "node-cron";
import Transaction from "./models/Transaction";
import { console500MSG } from "./utils/error";
import { HTTP_CODE_TRANSACTION_METRICS, MAIL_CONFIG } from "./config/constants";
import { getCurrencySymbol } from "./utils/transaction";
import { getUserMetrics } from "./utils/user";
import { sendNotificationMail } from "./utils/file-handlers";

export default (app, port = process.env.PORT || 8080) => {
  app.listen(port, () => {
    console.log(`App listening on port ${port}`);

    const creditFxn = function (investQuery) {
      (async () => {
        try {
          const today = new Date();

          const date = today.getDate();
          const mth = today.getMonth();
          const yr = today.getFullYear();

          // Querying from last quarter ensures users
          // who got skipped due, to a glitch or server down
          // time gets their roi deposited.

          const startOfLastQtr = new Date(yr, mth > 4 ? mth - 4 : 0, date);

          const nextDay = new Date(yr, mth, date + 1);

          const invs = await Investment.find(
            investQuery || {
              endDate: {
                $gte: startOfLastQtr,
                $lt: nextDay,
              },
              matured: false,
            }
          );

          // console.log(invs.length);

          for (const inv of invs) {
            await inv.updateOne({
              matured: true,
            });

            const trans = await (
              await new Transaction({
                investment: inv.id,
                user: inv.user,
                autoGenerated: true,
                currency: "USD",
                paymentType: "fiat",
                amount: inv.roi + inv.amount,
                description: `A deposit of ${getCurrencySymbol()}${
                  inv.totalAmount
                } has been credited, representing a ${
                  inv.roiPct
                }% return on your ${getCurrencySymbol(inv.currency)}${
                  inv.amount
                } investment in the ${
                  inv.description
                    ? inv.description.toLowerCase()
                    : "platform investment package"
                }.`,
              }).save()
            ).populate("user");

            const mailUser = (metrics = {}) => {
              sendNotificationMail(trans.user.email, {
                mailOpts: {
                  subject: MAIL_CONFIG.TRANS.subject,
                },
                tempOpts: {
                  heading: MAIL_CONFIG.TRANS.heading,
                  subText: MAIL_CONFIG.TRANS.subText,
                  fullname: trans.user.fullname,
                  text: `Your investment has successfully reached maturity, ${trans.description.toLowerCase()} Your current available balance is ${getCurrencySymbol()}${
                    metrics.availableBalance
                  }`,
                },
              });
            };

            getUserMetrics(trans.user.id)
              .then((metrics) => {
                mailUser(metrics);
              })
              .catch((err) => {
                console500MSG(err, HTTP_CODE_TRANSACTION_METRICS);
                mailUser();
              });
          }
        } catch (err) {
          console500MSG(err, "ROI_CREDIT_FXN");
        }
      })();
    };

    creditFxn();

    cron.schedule("0 0 * * *", creditFxn);
  });
};
